for (j in 1:members_left){
buddy_teams[nb_teams,2] <- paste(buddy_teams[nb_teams,2], members[j], sep=" ")
}
# return the dataframe with the buddy teams
return(buddy_teams)
}
members <- c("Christian", "Simon" , "Guillermo" , "Anne" , "Juliane", "Yari" , "Jette")
create_buddy_teams(members,2)
members <- c("Christian", "Simon" , "Guillermo" , "Anne" , "Juliane", "Yari" , "Jette")
create_buddy_teams(members,2)
members <- c("Christian", "Simon" , "Guillermo" , "Anne" , "Juliane", "Yari" , "Jette")
create_buddy_teams(members,2)
members <- c("Christian", "Simon" , "Guillermo" , "Anne" , "Juliane", "Yari" , "Jette")
create_buddy_teams(members,2)
setwd("Z:/jreeg/02 Eigene Projekte/01 Bibs/Simulation_files")
require(data.table)
require(ggplot2)
require(ggthemes)
dir <-"./1c"
setwd(dir)
setwd("Input")
# FT definitions
FT_def <- fread("FT_Definitions.txt")
LU_resources <- fread("LU_FT_suitability_forage_flying_period.txt")
# for (i in 1:150){
#   for (j in 1:150){
#     ID <- Patch_ID[i,j]
#     LU <- Patch_def[PID==ID]$TYPE
#     Landscape[i,j] <- LU
#   }
# }
#
# read in the last FT population file
# set working directory
setwd('..')
setwd('Output')
# read in example file
# Landscape
landscape <- transpose(fread("Land_1_1.txt", skip=1))[-1,]
landscape1 <- data.table(expand.grid(y=1:150, x=1:150))
landscape1[,LU:=0]
for ( j in 1:150){
for ( i in 1:150){
ID <- ((i-1)*150)+j
lu <- landscape[ID]
landscape1[y==j & x==i, LU:=lu]
}
}
landscape1[LU==6, LU:=1]
#####
# TZ 0
#####
Landscape0 <- copy(landscape1)
TZ0 <- transpose(fread("TZ_5_1.txt", skip = 1))[-1]
for (j in 1:150){
for (i in 1:150){
ID <- ((i-1)*150)+j
lu <- TZ0[ID]
# Landscape0[y==j & x==i, LU:=lu]
if (lu==1) Landscape0[y==j & x==i, LU:=6]
}
}
# Populations
Pop0 <-matrix( list(rep(0,28)), 150,150)
FTpop <- fread("LandOut_5_1.txt")
# which FT is foraging in which cell?
FTpop<-FTpop[Year==49]
#
for (j in 1:150){
for (i in 1:150){
popincell<-FTpop[x==i & y==j]
for (ft_id in popincell$FT_ID){
Pop0[[j,i]][ft_id] <- Pop0[[j,i]][ft_id] + popincell[FT_ID==ft_id,popsize]
}
}
}
foragingPop0 <-matrix( list(rep(0,28)), 150,150)
# go through each Pop100[[j,i]] vector and calculate the foraging range of each FT
for (j in 1:150){
for (i in 1:150){
FTs_toforage <- Pop0[[j,i]]
for (ft in 1:length(FTs_toforage)){
if (Pop0[[j,i]][ft]>0){
foraging_distance <- FT_def[ID==ft,dispmean/20]
# within the whole foraging range
xmin <- i-foraging_distance
if (xmin<1) xmin <- 1
xmax <- i+foraging_distance
if (xmax>150) xmax <- 150
ymin <- j-foraging_distance
if (ymin<1) ymin <- 1
ymax <- j+foraging_distance
if (ymax>150) ymax <- 150
for (x in xmin:xmax){
for (y in ymin:ymax){
# calculate exact distance
dist_curr <- sqrt(((i-x)^2)+((j-y)^2))
if (dist_curr<=foraging_distance){
foragingPop0[[y,x]][ft] <- foragingPop0[[y,x]][ft] + Pop0[[j,i]][ft]
} # end if
}
} # end foraging range
} # end if there is a population
}# end foraging FTs
}
}
# end population grid
Resource_uptake <- matrix(0, nrow=150, ncol=150)
# calculate for each cell the resource uptake
# go through each cell
for (j in 1:150){
for (i in 1:150){
foraging_populations <- foragingPop0[[j,i]]
resource_uptake <- 0
for (ft_curr in  1:length(foraging_populations)){
if (foraging_populations[ft_curr]>0){
sum_pop <- 0
C <- 0
sum_res_comp <- 0
cj <- FT_def[ID==ft_curr, c]
lu_id <- Landscape0[x==i & y==j, LU]
uptake <- as.data.frame(LU_resources[ID==lu_id])
uptake <- uptake[1,ft_curr+1]
if (lu_id==6) uptake <- uptake + 1
# get flying period of the FT
flying_period_curr <- FT_def[ID==ft_curr, flying_period]
if (flying_period_curr == 1){
competing_fts <- FT_def[flying_period==1 | flying_period==3, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
} # end for competing
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
} # end for competing
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
if (flying_period_curr == 2){
competing_fts <- FT_def[flying_period==2 | flying_period==3, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
}
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
}
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
if (flying_period_curr == 3){
competing_fts <- FT_def[, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
}
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
}
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
}
}
Resource_uptake[j,i] <- resource_uptake
}
}
fwrite(Resource_uptake, "resource_uptake_heatmap_0.txt")
Landscape0 <- copy(landscape1)
TZ0 <- transpose(fread("TZ_5_1.txt", skip = 1))[-1]
for (j in 1:150){
for (i in 1:150){
ID <- ((i-1)*150)+j
lu <- TZ0[ID]
# Landscape0[y==j & x==i, LU:=lu]
if (lu==1) Landscape0[y==j & x==i, LU:=6]
}
}
# Populations
Pop0 <-matrix( list(rep(0,28)), 150,150)
FTpop <- fread("LandOut_5_1.txt")
# which FT is foraging in which cell?
FTpop<-FTpop[Year==49]
#
for (j in 1:150){
for (i in 1:150){
popincell<-FTpop[x==i & y==j]
for (ft_id in popincell$FT_ID){
Pop0[[j,i]][ft_id] <- Pop0[[j,i]][ft_id] + popincell[FT_ID==ft_id,popsize]
}
}
}
Resource_uptake <- matrix(0, nrow=150, ncol=150)
# calculate for each cell the resource uptake
# go through each cell
for (j in 1:150){
for (i in 1:150){
foraging_populations <- foragingPop0[[j,i]]
resource_uptake <- 0
for (ft_curr in  1:length(foraging_populations)){
if (foraging_populations[ft_curr]>0){
sum_pop <- 0
C <- 0
sum_res_comp <- 0
cj <- FT_def[ID==ft_curr, c]
lu_id <- Landscape0[x==i & y==j, LU]
uptake <- as.data.frame(LU_resources[ID==lu_id])
uptake <- uptake[1,ft_curr+1]
if (lu_id==6) uptake <- uptake + 1
# get flying period of the FT
flying_period_curr <- FT_def[ID==ft_curr, flying_period]
if (flying_period_curr == 1){
competing_fts <- FT_def[flying_period==1 | flying_period==3, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
} # end for competing
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
} # end for competing
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
if (flying_period_curr == 2){
competing_fts <- FT_def[flying_period==2 | flying_period==3, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
}
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
}
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
if (flying_period_curr == 3){
competing_fts <- FT_def[, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
}
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
}
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
}
}
Resource_uptake[j,i] <- resource_uptake
}
}
View(Resource_uptake)
View(foragingPop0)
# Populations
Pop0 <-matrix( list(rep(0,28)), 150,150)
FTpop <- fread("LandOut_5_1.txt")
# which FT is foraging in which cell?
FTpop<-FTpop[Year==49]
FTpop
#
for (j in 1:150){
for (i in 1:150){
popincell<-FTpop[x==i & y==j]
for (ft_id in popincell$FT_ID){
Pop0[[j,i]][ft_id] <- Pop0[[j,i]][ft_id] + popincell[FT_ID==ft_id,popsize]
}
}
}
foragingPop0 <-matrix( list(rep(0,28)), 150,150)
# go through each Pop100[[j,i]] vector and calculate the foraging range of each FT
for (j in 1:150){
for (i in 1:150){
FTs_toforage <- Pop0[[j,i]]
for (ft in 1:length(FTs_toforage)){
if (Pop0[[j,i]][ft]>0){
foraging_distance <- FT_def[ID==ft,dispmean/20]
# within the whole foraging range
xmin <- i-foraging_distance
if (xmin<1) xmin <- 1
xmax <- i+foraging_distance
if (xmax>150) xmax <- 150
ymin <- j-foraging_distance
if (ymin<1) ymin <- 1
ymax <- j+foraging_distance
if (ymax>150) ymax <- 150
for (x in xmin:xmax){
for (y in ymin:ymax){
# calculate exact distance
dist_curr <- sqrt(((i-x)^2)+((j-y)^2))
if (dist_curr<=foraging_distance){
foragingPop0[[y,x]][ft] <- foragingPop0[[y,x]][ft] + Pop0[[j,i]][ft]
} # end if
}
} # end foraging range
} # end if there is a population
}# end foraging FTs
}
}
Resource_uptake <- matrix(0, nrow=150, ncol=150)
# calculate for each cell the resource uptake
# go through each cell
for (j in 1:150){
for (i in 1:150){
foraging_populations <- foragingPop0[[j,i]]
resource_uptake <- 0
for (ft_curr in  1:length(foraging_populations)){
if (foraging_populations[ft_curr]>0){
sum_pop <- 0
C <- 0
sum_res_comp <- 0
cj <- FT_def[ID==ft_curr, c]
lu_id <- Landscape0[x==i & y==j, LU]
uptake <- as.data.frame(LU_resources[ID==lu_id])
uptake <- uptake[1,ft_curr+1]
if (lu_id==6) uptake <- uptake + 1
# get flying period of the FT
flying_period_curr <- FT_def[ID==ft_curr, flying_period]
if (flying_period_curr == 1){
competing_fts <- FT_def[flying_period==1 | flying_period==3, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
} # end for competing
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
} # end for competing
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
if (flying_period_curr == 2){
competing_fts <- FT_def[flying_period==2 | flying_period==3, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
}
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
}
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
if (flying_period_curr == 3){
competing_fts <- FT_def[, ID]
# sum of competition parameter
for (z in competing_fts) {
# sum of populations
sum_pop <- sum_pop + foraging_populations[z]
# sum of competition effects
if (foraging_populations[z]>0) C <- C + FT_def[ID==z, c]
}
# calculate competition
for (z in competing_fts){
if (foraging_populations[z]>0){
ci <- FT_def[ID==z, c]
Ni <- foraging_populations[z]
to_add <- (1+((cj-ci)/C))*Ni
sum_res_comp <- sum_res_comp + to_add
}
}
sum_res_comp <- sum_res_comp/sum_pop
resource_uptake <- resource_uptake + (sum_res_comp*uptake)
}
}
}
Resource_uptake[j,i] <- resource_uptake
}
}
fwrite(Resource_uptake, "resource_uptake_heatmap_0.txt")
resource_uptake_0 <-transpose(fread("resource_uptake_heatmap_0.txt"))
fwrite(resource_uptake_0, "res_heat_0.txt", sep=" ", row.names = F, col.names = F)
setwd('..')
i <- "./1c"
file<-paste("Agroscapelab_20m_150x150_", dir, ".asc", sep="")
fileName=file
con=file(fileName,open="r")
line=readLines(con)[1:6]
close(con)
lines <- line
dir <- unlist(strsplit(i,"./"))[2]
file<-paste("Agroscapelab_20m_150x150_", dir, ".asc", sep="")
fileName=file
con=file(fileName,open="r")
line=readLines(con)[1:6]
close(con)
lines <- line
for (input in 1:nrow(resource_uptake_0)){
to.write<-paste(t(as.data.frame(resource_uptake_0)[input,])[,1],collapse=" ")
lines<-c(lines,to.write)
}
fileOut<-file("Res_Heat_0.txt")
writeLines(lines, fileOut)
setwd(i)
ls.raster = raster(paste("Agroscapelab_20m_150x150_",unlist(strsplit(i,"./"))[2], ".asc", sep=""))
require(rgdal)
require(rgeos)
library(raster)
library(rasterVis)#this is a good one for plotting raster with ggplot
ls.poly = readOGR("Shape_alone_all_classes.shp")
ls.poly = readOGR("Shape_alone_all_classes.shp")
feed.raster.0 = raster("Res_Heat_0.txt")
#Set coordinate reference system of the raster. Must be the same, always ;)
crs(ls.raster)=crs(ls.poly)
crs(feed.raster.0)=crs(ls.poly)
ls.raster = raster(paste("Agroscapelab_20m_150x150_",unlist(strsplit(i,"./"))[2], ".asc", sep=""))
#Set coordinate reference system of the raster. Must be the same, always ;)
crs(ls.raster)=crs(ls.poly)
crs(feed.raster.0)=crs(ls.poly)
ls.poly=rasterToPolygons(ls.raster,dissolve = T)
ls.poly@plotOrder<-as.integer(c(6,5,4,3,2,1))
plot.landscape=gplot(ls.raster)+ #note: gplot() from rasterVis
geom_raster(aes(fill=factor(value)),alpha=1)+
scale_fill_manual(name = "Land use class",
values=c("darkgrey", "darkgoldenrod3", "darkgreen", "darkolivegreen3", "black", "cornflowerblue"),
labels = c("bare", "arable", "forest", "grassland", "urban", "water"))+
geom_polygon(data = ls.poly, aes( x = long, y = lat, group = group,color=NA),fill=NA,size=.5) +
scale_color_manual(values=c("darkred"))+
theme_bw() +
labs(x="easting [m]",y="northing [m]",title = "Landscape",color="")+
coord_equal(expand=F)+
theme(title = element_text(size=8), plot.title = element_text(hjust=0.5),
axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size=8),
legend.text = element_text(size=6), legend.position="none")
plot.feed.0=gplot(feed.raster.0)+ #note: gplot() from rasterVis
geom_raster(aes(fill=value),alpha=1,interpolate = T)+ #interpolate smoothes the raster, you may do not want this
scale_fill_viridis_c(limits = c(0, max(getValues(feed.raster.100))), direction =  1, option = "magma")+
geom_polygon(data = ls.poly, aes( x = long, y = lat, group = group,color=factor(id)),fill=NA,size=.5) +
scale_color_manual(name = "Land use class",
values=c("darkgrey", "darkgoldenrod3", "darkgreen", "darkolivegreen3", "black", "cornflowerblue"),
labels = c("bare", "arable", "forest", "grassland", "urban", "water")
)+
theme_bw() +
guides(color=F)+
labs(x="",y="",title = "0%",color="",fill="Feeding\nintensity")+
coord_equal(expand=F)+
theme(title = element_text(size=8), plot.title = element_text(hjust=0.5),
axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size=8),
legend.text = element_text(size=6), legend.position="none")
